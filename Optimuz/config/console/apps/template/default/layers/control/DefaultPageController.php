<?php/** * This file contains only a controller. * @version 0.2 * @package Controller *//** * Default controller for all pages. * @author Diego Andrade * @package Controller * @version 0.2 * @since Optimuz 0.1 * @uses Core.Load * @uses Strings.Text * @uses Error * @uses Configuration.LocalConfiguration */class DefaultPageController extends DefaultController{	/**	 * Markup used to write the template and view. It is defined it the	 * global/local configuration under the section page.markup.	 * @var string	 */	protected $markup				= null;	/**	 * Initializes the default properties and loads resources files, like CSS	 * and JS.	 */	public function __construct()	{		parent::__construct();		$this->markup = LocalConfiguration::get('page.markup');		// view setting		if(is_null($this->view))			$this->setView('DefaultPage');		$this->view->setTitle(LocalConfiguration::get('app.title'));		// template setting		$this->view->setTemplate("{$this->markup}.Default");		try{			$sessionController = "{$this->getControllerName()}SessionController";			Load::controller("Session.{$sessionController}", false);			$this->session = new $sessionController($this->getControllerName());		}		catch(Exception $error){			if($error->getCode() !== File::NOT_EXISTS)			{				Report::sendError($error);				$this->error();			}			else			{				$this->session = new DefaultSessionController($this->getControllerName());			}		}	}	/**	 * This is the default method. It acts exactly like an index file inside a	 * web directory. If no method is specified, this one will be called.	 *	 * This method must be overloaded in the sub classes, and any parameters	 * must be specified too.	 *	 * If this method is not overloaded an Error will be thrown.	 * @uses Error	 */	public function index()	{		throw new Error(Language::getCurrent()->getSentence('error.methodNotImplemented'), DefaultController::METHOD_NOT_IMPLEMENTED);	}	/**	 * This method is used to handle errors and to show an error page.	 * @param Error $error (optimal) Error object.	 * @param mixed $info (optimal) Aditional information that will be passed	 * to the view.	 */	public function error(Error $error = null, $info = null)	{		$this->view->setTemplate("{$this->markup}.Default");		$this->view->setHtmlPage('Error.PageError');		// error page variables		if(is_null($error))			$error = $this->view->getError();		$this->callErrorPage($error, $info);	}	/**	 * Displays a warning page, about an error not so important.	 */	public function warning()	{		$this->view->setTemplate("{$this->markup}.Default");		$this->view->setHtmlPage('Error.Warning');		if(!$this->callView())		{			$this->error($this->view->getError());			Report::sendError($this->view->getError());		}	}	/**	 * This method is used to handle errors and to show an error page.	 * @param Error $error (optimal) Error object.	 * @param mixed $info (optimal) Aditional information that will be passed	 * to the view.	 */	protected function callErrorPage(Error $error = null, $info = null)	{		$params = array();		if(!is_null($error))		{			$errorDescription = Text::toHtml($error);			$errorLine = Text::toHtml($error->getLine());			$errorFile = $error->getFile();			$errorTrace = $error->getHtmlStack();			$params = array(				'errorDescription' => $errorDescription,				'errorLine' => $errorLine,				'errorFile' => $errorFile,				'errorTrace' => $errorTrace			);		}		if(!is_null($info))			$params['additionalInfo'] = $info;		$this->callView($params);	}	/**	 * This method is called to handle controllers not found.	 * @param Error $error Error object.	 * @param mixed $info Additional information that will be passed to the	 * view.	 */	public function pageNotFound(Error $error, $info = null)	{		$this->view->setHtmlPage('Error.PageNotFound');		$this->view->setTemplate("{$this->markup}.Default");		$this->response->setStatusCode(404);		$this->callErrorPage($error, $info);	}}?>